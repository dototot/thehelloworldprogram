{"componentChunkName":"component---src-templates-blog-post-js","path":"/python/python-string-operations-concatenation-multiplication-indexing-slicing/","result":{"data":{"markdownRemark":{"html":"<p>Did the excitement of the print() function wear off? There’s a lot more to strings than simply printing them out in IDLE. In this tutorial we will cover Python string operations: concatenation, multiplication, indexing and slicing. If you’re just joining us, you might want to check out <a href=\"https://thehelloworldprogram.com/python/python-strings-characters/\" title=\"print(“Python Strings &#x26; Characters”)\">our previous tutorial introducing strings</a>.</p>\n<h2>String Operations</h2>\n<p>Think of strings like beads on a necklace. In fact, let’s make a string necklace right now. First, we need an empty string. We create strings by wrapping quotation marks around a value. I’m calling my string <code class=\"language-python\">necklace</code> and I’m declaring it with two quotation marks with nothing in-between.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> necklace <span class=\"token operator\">=</span> “”</code></pre></div>\n<p>Now, when I call necklace…</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> necklace\n‘’</code></pre></div>\n<p>The interpreter returns an empty string. Even though there is nothing to display, an empty string is still a string. See for yourself…</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>necklace<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> ‘<span class=\"token builtin\">str</span>’<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token keyword\">class</span><span class=\"token operator\">></span></code></pre></div>\n<p>And it still holds a place in memory (remember: your memory location will be different than mine):</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>necklace<span class=\"token punctuation\">)</span>\n<span class=\"token number\">140302760209408</span></code></pre></div>\n<p>A blank space is considered a character so a single space is also a string. Try it:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> blank <span class=\"token operator\">=</span> ‘ ‘\n<span class=\"token operator\">>></span><span class=\"token operator\">></span>blank\n‘ ‘\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>blank<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> ‘<span class=\"token builtin\">str</span>’<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token keyword\">class</span><span class=\"token operator\">></span></code></pre></div>\n<p>Let’s add our first bead. We do so using the <strong>+</strong> operator and any character so long as it is wrapped in quotation marks…</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> necklace <span class=\"token operator\">=</span> necklace <span class=\"token operator\">+</span> “O”\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> necklace\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> ‘O’</code></pre></div>\n<p>Great! Now we have one bead on our necklace, or, rather, character on our string.</p>\n<p>The operation we performed there wasn’t addition, though. It’s what in computer programming is referred to as <strong>concatenation</strong>. Concatenation is the joining of two strings end-to-end.</p>\n<p>But wait a minute! Why did I add <code class=\"language-python\">necklace</code> to itself? Because strings are <em>immutable</em>, which means they can’t be changed. Unlike numerical values, a string can’t be changed after it is declared. In order to store the value of a string operation, we need to assign it to a new variable. In this case, I am assigning to <code class=\"language-python\">necklace</code> the value currently stored in <code class=\"language-python\">necklace</code>, ‘’, an empty string, plus the value ‘O’.</p>\n<p>Try adding another character without assigning our string value to a new variable.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> necklace <span class=\"token operator\">+</span> ‘o’\n‘Oo’</code></pre></div>\n<p>That gave us the output we expected. But as you will see, it didn’t store that value. Call <code class=\"language-python\">necklace</code> again:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> necklace\n‘O’</code></pre></div>\n<p>Let’s add another bead to our necklace with an assignment statement:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> necklace <span class=\"token operator\">=</span> necklace <span class=\"token operator\">+</span> ‘o’\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> necklace\n‘Oo’</code></pre></div>\n<p>That’s more like it. But at this rate it’s going to take forever to make a nice, long string of characters. Let’s speed up the process with the <strong>*</strong> operator.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> necklace <span class=\"token operator\">=</span> necklace <span class=\"token operator\">*</span> <span class=\"token number\">20</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> necklace\n<span class=\"token string\">'OoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOo'</span></code></pre></div>\n<p>Ooh, pretty!</p>\n<h2>String Indices and Slices</h2>\n<p>Because a string is a sequence, we can access a single character or <em>slices</em> of it with the <strong>index operator</strong>, <strong>[ ]</strong>. I like to think of the index operator like the claw crane game you find in an arcade. Let’s create a new string, ‘sock monkey’, assigned to the variable <code class=\"language-python\">s</code> , for string.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> s <span class=\"token operator\">=</span> ‘sock monkey’</code></pre></div>\n<p>I drop my index claw into my variable, like so:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> s<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n‘s’</code></pre></div>\n<p>And I pull out the zeroth element, ‘s’.</p>\n<p>Let’s try that again…</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> s<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n‘o’</code></pre></div>\n<p>What happens if I grab the 4th element?</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> s<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span>\n‘ ‘</code></pre></div>\n<p>My index claw grabs the blank, which, though it doesn’t look like much, is still a valid and very important character.</p>\n<p>Grabbing individual letters from a string is fun… the first few times. So let’s extract larger chunks. We can pass more than one value to the index operator, defining the range of the slice we want to extract. I want the monkey without the sock, so…</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> s<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">:</span><span class=\"token number\">11</span><span class=\"token punctuation\">]</span>\n‘monkey’</code></pre></div>\n<p>This is the same as:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> s<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\n‘monkey’</code></pre></div>\n<p>If we want everything beyond our starting index, we don’t need to specify our end point.</p>\n<p>It works in the other direction, too.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> s<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span>\n‘sock’</code></pre></div>\n<p>Did you notice something odd there? We declared index 4, and though our interpreter returned four characters, it only returned those from the indices 0, 1, 2 &#x26; 3, not 4. This is how slicing works in Python. The operation returns everything up to the specified index.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> s<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span>\n‘ck mo’</code></pre></div>\n<p>Let’s verify this by calling the indices individually:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> s<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\n‘c’\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> s<span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span>\n‘n’</code></pre></div>\n<p>We can also access indices backwards with negative integers:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> s<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\n‘sock monk’\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> s<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\n‘key’</code></pre></div>\n<p>Cool, right? It gets better. <a href=\"https://thehelloworldprogram.com/python/python-string-methods/\" title=\"Python String Methods: str(), upper(), lower(), count(), find(), replace() &#x26; len()\">Next up? String methods!</a></p>","excerpt":"Did the excitement of the print() function wear off? There’s a lot more to strings than simply printing them out in IDLE. In this tutorial…","frontmatter":{"lesson":9,"title":"Python String Operations: Concatenation, Multiplication, Indexing and Slicing","category":"Python","video":null,"image":{"childImageSharp":{"fluid":{"tracedSVG":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='400'%20height='222'%20viewBox='0%200%20400%20222'%20preserveAspectRatio='none'%3e%3cpath%20d='M0%20111v111h51c47%200%2051%200%2049-2-1-1-2-2-2-5%200-2%200-3-1-1l-1%201v-8%201l2%201c1-1%202%200%202%201l2%201h3l-1%201v1h2c2%200%202%200%200%205%200%202%202%201%203-1%201-1%201-1%203%202l4%203c2%200%202-1-2-5-4-3-5-5-4-6l1-5c1-7%208-17%2011-15h2l3-1v-1c-2-1%203-2%206-1%204%202%204%204-1%203l-6%201-3%202-2%201a87%2087%200%200029-2c2%200%202%200%200%202-3%204-6%207-10%208-4%202-7%206-5%207s0%205-4%209l-3%203h74v-8l1%204c0%203%200%204%202%204s2%200%200-2l-1-8%201-5-2%203-1%204%201-4-1-6v-3h1c-1%202%200%202%201%202h3l1-1h-2c-2%200-2%200-1-1%202-1%202-1%201-2-2-1%200-3%202-2l1-1%201-1h2l1%201h1c-1-1%200-2%201-2%201-1%204%200%204%201l2%201%205%202%203%202%202-3c1-1%203-3%203-5%201-2%202-2%204-2%202%201%203%200%203-1h2l2-1v1l2%201c1-1%203%200%204%201%202%202%202%204%201%204h-8l-2%202c-1%200-2%203%200%203v2c0%202%200%202-2%201-1-1-1-1-1%201%202%204%202%205%201%205-3%200-2%202%200%202%202%201%203%204%201%206-1%201-1%201%201%202%202%200%203%201%203%202l4%201c3%200%203%200%201-1-3-1-4-3-6-6l-1-8%201-1v-3l1-1h1l4-1%2013-5c12-7%2019-7%2029-2%205%203%206%205%204%206v1l4-3c2-2%202-2%203%200%203%202%202%203%200%202-4%200-6%202-3%203l4-1c3-2%203%201%201%204-1%202-3%203-7%203l-4%201%206%201%2015%203c3%200-1%203-6%203-4%201-9%203-6%203v1l49%201h49V0h-17l-17%201-2%201-3-1-181-1H0v111M274%206c-3%202-6%206-5%208h-2l1%202c2%203%203%205%200%203-2-2-3-3-2-1l-1%201c-1-1-2%200-2%201l-1%201-1%201-1%202c-2%200-3-2-1-2%202-2%201-3-1-2-3%200-3%200-2%201l1%204h-2v1c0%202%200%202-1%201-1-2-4%202-3%204l-2%203v3l1%205-2%202-2%201c-1-1-1%201-1%204l-1%206v6c1%202%201%204-1%206-1%201-1%201%201%202%201%200%202%201%201%202h-1l-1%201c0%202%203%201%204-1h1c0%203%202%202%202%200s0-2%201-1l1%201%201%202c0%202%200%202%201%200l1-1%201-1c1-2%201-2%201%200-1%201%200%202%201%202%202%200%202%200%201%201l-2%201-2%202c-1%202-3%203-3%201v-3c0-2%200-2-1-1l-1%203v3c1%201%201%201-1%203l-1%202%203-2%202-1%201%201h1l1%202%201-2c-1-1%200-2%201-2%202-1%202-1%201-2-2-2-2-2%200-3h2c-1%202%201%205%204%205%203-1%204%202%201%202-1%201-1%201%201%201s2%200%201%202-2%202-3%200h-6c-1%200-2%201-2%203%200%204%201%204%203%201%201-3%204-4%204-1%201%202%201%202%202%201h2l1-2c0-2%200-2%201%201%202%203%204%204%203%202v-2l2%202v1c-3%200-2%202%200%203%202%200%202%200%201%201l-3%201h-3c-1%201-2%201-2-1h-2l-1%202c2%201%202%207%201%207l-2-2v-3l-2-1c-1%201-1%200-1-1v-3l-1%203c0%202%200%202-1%201h-2v1l1%202h2v2l1%201v1h1c0-2%202-1%203%202v3l3-2%201-4%201-1v-1c-1-1-2-2-1-3h1l1-1c2-2%205%200%205%203v3c1%201%200%201-2%201-3%201-3%201-2%202%201%200%202%201%201%202h-2c-2-1-3%200-3%203v4l2-2%203-2-1%202%201%202h1c0-3%203-2%203%200s1%202%203-1l2-6%201-2%201-2%202-1%201%204c0%202%201%203%202%203v-1l1-1h2l-1-1-2-1h2l1-2h1l2%201v1l1%201v2c-1%202-2%202-2%201v1l-1%202v1l-1%202h-3c-1-2-1-2-2-1h-1l-2-1c-2%200-2%200-2%202v3l2%202%202-1h3c2-3%203-2%202%200%200%201%200%202%201%201h2c1%200%202-3%201-7%200-2%203-3%204-2s1%201%201-1l1-2%201%202c0%202%202%201%202-1l2-2h2c1-1%201%200%201%201l-1%205c0%203%200%203-2%202-2-2-2-2-2%200s0%202-1%201l-2-1h-2l-1%201-1%201h-1l1%201%201%201%201%202%201%201%202%201%202-1%201-3%201-3v1l1%201h1l1%202c1%201%203%200%202-2h-2l2-3c1-1%201-1%201%201l5%201%202%201-2%201v1c2%202%205-1%204-3l3-1%201-1%201-1c1%200%202%201%201%203%200%202%200%202%201%200l2-2%203%201c2%200%203-1%202-2%200-2%200-2%201-1h1v-4h1l2-1%203-1h5v-4l1%201h1c1-1%200-2-1-3l-2-2h1l1%201h3v-1c2%201%201-2-1-4s-3-5-2-6l3-4%203-3%204%204c5%205%206%205%204%201l-2-2-2-4v-3l1-1c0-2%204-6%207-6l2%201c0%202%201%204%205%205%202%200%202%200%201-1-1-2%201-4%203-3l3-1%201-2-1-2%202-2c2%200%202%200%201-1-2-1%200-5%203-5v-6c0-1%200-2-2-1l-1-1c0-2%201-2%203-1%203%200%203%200%202-1l-2-3-1-1v2l-1%201-2-3-2-3c-1-1-1-1%201-1s2%200%201-1c-2-2-2-2-1-3%202-2%202-3%201-3l-2-1-1-2-2-1-1-2-1-2%201-1%202-1c1-2%201-2%202-1%201%202%201%203-1%203s-2%201%200%202c3%201%203%201%203-2s0-3%201-1l2%203v-3c-2-2-2-3-1-3v-2l-1-2h-3c-1%201-5-2-4-3%200-2-6-3-7-2v2l-1%201c-3%200-3%202-4%2012l-4%206-3%203-1%202-3%204-6%207-6%207v1l-1%201-4%205-10%209c-9%209-14%2011-21%2012-7%200-14-2-14-3l2-1c3%202%209%202%2011%202l5-1c7-1%2016-9%2022-19l2-7h1l1-1v-3l1-1%203%201v2l2-1%201-3v-1h3l1-3c0-2-2-2-4%200l-3%202v-2c2-1%200-4-2-4s-2%200-3-7c0-7%200-7-3-10l-4-6-2-4-1-2h-1l-3-2-11-1-8-1-1-1h-3c-2-1-4-1-7%201-6%203-8%207-9%2018-1%208-2%209-3%208l-2-2-2-3c-2-1%200-6%202-6v-2l1-4c1%200%201-1-1-2-3-2-4-6-1-5l1-1v-1l1%201h1c1-3%200-6-1-3-1%201-1%201-1-1%201-4%200-5-3-4M97%2011l-2%202v6c2%201%202%201%201%203-3%203-3%207-1%207l6%201%203-1%201-2v1l1%201h1l2%201v-1l1-1c2%200%203%200%202-1%200-2-1-2-2-1h-1v-1c-1%201-4-1-4-2h3c2%200%203%200%202-1-2%200-4-3-4-3h2c2%200%202%200%201-1l-1-1c2-3-6-8-11-6M42%2043l-1%2017%201%203c1%201%202%201%202%203%200%203%203%208%207%209l3%203c0%203%209%2010%2010%209h2v1c-2%200%200%201%202%202l4-1c1-1%201-1%201%205l2%202c4-1%205-1%205%202s0%203%203%203l3%202%203%201%202%201h1c0-1%205%200%206%202s1%202%203%201c1-1%202-1%203%201%203%203%208%203%2011%200l2-1c0%202%204%202%204%200l1-2h-3l-2-1-1-1c0-2%203-2%205-1h1l1-1%204-1%204-1h2l2-1%207-7c-1-3-10%200-12%203l-2%201-4%202c-2%202-2%202-5%201h-3l-3-2c-2-2-3-2-5-1s-2%201-3-1c-1-3-5-6-6-4-1%201-4-1-4-3l-1-1c-3%200-7-5-6-5%201-1%200-1-1-1l-2-1c1-2%200-5-1-5l-1%202c1%202-1%203-3%201h-1c-2%201-3%200-2-2h2l2-1c0-1-3-2-4-1l-5-2-3-5%204%203c3%203%205%204%205%202l-1-1v-1c1-1%200-2-2-5-3-2-4-3-5-1h-4l1%201%201%201-3%201c-2%200-2-1-2-3%200-3%200-4-2-5l-3-2-2-2h-1l-1-1-2-3-3-1-2-1c1-1-1-6-3-6h-2m143%2048l-16%204c-9%203-9%203-13%201-4-1-4-1-2%202%201%203%201%203-5%209-11%2011-10%2022%202%2033%2026%2023%2088%2017%20101-9%2011-23-26-45-67-40'%20fill='%23d3d3d3'%20fill-rule='evenodd'/%3e%3c/svg%3e","aspectRatio":1.8045112781954886,"src":"/static/441d494a682708a7bee0e744157ed638/0d359/20140916_python4.2_string_operations.png","srcSet":"/static/441d494a682708a7bee0e744157ed638/5ae31/20140916_python4.2_string_operations.png 240w,\n/static/441d494a682708a7bee0e744157ed638/88c65/20140916_python4.2_string_operations.png 480w,\n/static/441d494a682708a7bee0e744157ed638/0d359/20140916_python4.2_string_operations.png 900w","sizes":"(max-width: 900px) 100vw, 900px"}}}}}},"pageContext":{"slug":"/python/python-string-operations-concatenation-multiplication-indexing-slicing/","totalLessons":24}}}