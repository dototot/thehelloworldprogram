{"componentChunkName":"component---src-templates-blog-post-js","path":"/python/python-variable-assignment-statements-rules-conventions-naming/","result":{"data":{"markdownRemark":{"html":"<p>Think of a number. Any number. Now, before you forget that number, let’s store it for later. When you think of a number, you are holding that value in your head. If you want to remember it later and your memory is like mine, you write it down on a piece of paper. And if it’s really important, you will put it in a safe place. In computer science, that safe place is a <em>variable</em>. They’re called variables because, well, they’re “capable of being varied or changed”. You can name a variable (almost) anything you want and you can change the value willy-nilly.</p>\n<p>I thought of the number 5, so at the Python prompt, I will create a variable with the clever name “number”, and enter my value:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> number <span class=\"token operator\">=</span> <span class=\"token number\">5</span></code></pre></div>\n<p>Now stop thinking of that number. We’ll come back to it later. If you’re just joining us, you may want to start at the beginning with our <a href=\"https://thehelloworldprogram.com/python/now-something-completely-different/\" title=\"And Now For Something Completely Different… An Introduction to the Python Programming Language\">introduction to the Python programming language</a>.</p>\n<h2>Python Variable Assignment Statements</h2>\n<p>In the above illustration, Attlee, Truman, and Stalin are each thinking of a number. We can treat their names as variables and their respective numbers as values, like so:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> Attlee <span class=\"token operator\">=</span> <span class=\"token number\">7</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> Truman <span class=\"token operator\">=</span> <span class=\"token number\">101</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> Stalin <span class=\"token operator\">=</span> “a number”</code></pre></div>\n<p>This is called an assignment statement. We use the equal sign (=) to assign a value to a variable. It’s like saying, “Attlee <em>is</em> 7”. If I want to know what number Attlee is thinking about, I simply enter his name at the prompt:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> Attlee\n<span class=\"token number\">7</span></code></pre></div>\n<p>Now it’s your turn. Try it with the other heads of state.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> Truman\n<span class=\"token number\">101</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> Stalin\n‘a number’</code></pre></div>\n<p>Stalin is being a wisenheimer. ‘a number’ is a string, not a number, and we haven’t covered strings yet. You can change the value of a variable by assigning it a new value. Let’s reassign Stalin’s value to a float. How about pi?</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> Stalin <span class=\"token operator\">=</span> <span class=\"token number\">3.14</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> Stalin\n<span class=\"token number\">3.14</span></code></pre></div>\n<p>My head is too full of values to remember anything more than 3.14. Fortunately, we can easily assign the value of <em>pi</em> to a variable using the math module.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">import</span> math\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> math<span class=\"token punctuation\">.</span>pi\n<span class=\"token number\">3.141592653589793</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> Stalin <span class=\"token operator\">=</span> math<span class=\"token punctuation\">.</span>pi\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> Stalin\n<span class=\"token number\">3.141592653589793</span></code></pre></div>\n<p>As easy as pie.</p>\n<h2>Variable Naming Conventions and Rules</h2>\n<p>You may be familiar with algebraic equations, such as the quadratic:</p>\n<blockquote>\n<p>ax² + bx + c = 0</p>\n</blockquote>\n<p>In mathematics, variables are generally single letters like x, y, and z, or Greek symbols like π or θ. Mathematicians often use variables when they don’t know a specific value but are working towards finding it. It’s different in Python. You must assign a value to a variable before you can use it, even if that value is zero or empty. If, for example, I call the variable Guido before assigning it a value:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> Guido</code></pre></div>\n<p>I will get the following error:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">Traceback <span class=\"token punctuation\">(</span>most recent call last<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n File <span class=\"token string\">\"&lt;stdin>\"</span><span class=\"token punctuation\">,</span> line <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">in</span> <span class=\"token operator\">&lt;</span>module<span class=\"token operator\">></span>\nNameError<span class=\"token punctuation\">:</span> name <span class=\"token string\">'Guido'</span> <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> defined<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>module<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>stdin<span class=\"token operator\">></span></code></pre></div>\n<p>Variable assignment works left to right.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">>></span> Guido <span class=\"token operator\">=</span> <span class=\"token number\">0</span></code></pre></div>\n<p>Is acceptable. As is:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> Guido <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span></code></pre></div>\n<p>And even:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">>></span> Guido <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span></code></pre></div>\n<p>But the following will give you a nasty error.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">=</span> Guido\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> ‘’ <span class=\"token operator\">=</span> Guido\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token boolean\">False</span> <span class=\"token operator\">=</span> Guido</code></pre></div>\n<p>The first two gave you an error that read:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"> File <span class=\"token string\">\"&lt;stdin>\"</span><span class=\"token punctuation\">,</span> line <span class=\"token number\">1</span>\nSyntaxError<span class=\"token punctuation\">:</span> can't assign to literal<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>stdin<span class=\"token operator\">></span></code></pre></div>\n<p>But the last one gave you an error that read:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"> File <span class=\"token string\">\"&lt;stdin>\"</span><span class=\"token punctuation\">,</span> line <span class=\"token number\">1</span>\nSyntaxError<span class=\"token punctuation\">:</span> assignment to keyword<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>stdin<span class=\"token operator\">></span></code></pre></div>\n<p>That’s because False is a <em>reserved word</em> in Python. It’s what computer scientists refer to as a <em>Boolean value,</em> and you can’t use it as a variable identifier. There’s a Python module called keyword. It has a function called kwlist. Importing keyword and calling kwlist will return a list of Python’s keywords. Try it:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">>></span> <span class=\"token keyword\">import</span> keyword\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> keyword<span class=\"token punctuation\">.</span>kwlist</code></pre></div>\n<p>Those are all the words you can’t use. But that’s okay. When it comes to variable names, the sky is the limit! Well, almost. There are some rules you need to follow and some conventions you ought.</p>\n<h3>The Rules</h3>\n<ul>\n<li>\n<p>Variables names must start with a letter or an underscore, such as:</p>\n<ul>\n<li>_underscore</li>\n<li>underscore_</li>\n</ul>\n</li>\n<li>\n<p>The remainder of your variable name may consist of letters, numbers and underscores.</p>\n<ul>\n<li>password1</li>\n<li>n00b</li>\n<li>un<em>der</em>scores</li>\n</ul>\n</li>\n<li>\n<p>Names are case sensitive.</p>\n<ul>\n<li>case<em>sensitive, CASE</em>SENSITIVE, and Case_Sensitive are each a different variable.</li>\n</ul>\n</li>\n</ul>\n<h3>The Conventions</h3>\n<ul>\n<li>\n<p>Readability is very important. Which of the following is easiest to read? I’m hoping you’ll say the first example.</p>\n<ul>\n<li>python_puppet</li>\n<li>pythonpuppet</li>\n<li>pythonPuppet</li>\n</ul>\n</li>\n<li>\n<p>Descriptive names are very useful. If you are writing a program that adds up all of the bad puns made in this book, which do you think is the better variable name?</p>\n<ul>\n<li>total<em>bad</em>puns</li>\n<li>super_bad</li>\n</ul>\n</li>\n<li>Avoid using the lowercase letter ‘l’, uppercase ‘O’, and uppercase ‘I’. Why? Because the l and the I look a lot like each other and the number 1. And O looks a lot like 0.</li>\n</ul>\n<p>In our next lesson we will put all of this to good use <a href=\"https://thehelloworldprogram.com/python/python-variable-assignment-memory-location/\" title=\"Python Variable Assignment and Memory Location\">making variable sandwiches</a>. Mmm, just like Mom used to make.</p>","excerpt":"Think of a number. Any number. Now, before you forget that number, let’s store it for later. When you think of a number, you are holding…","frontmatter":{"lesson":6,"title":"Python Variable Assignment Statements and Naming Rules & Conventions","category":"Python","video":null,"image":{"childImageSharp":{"fluid":{"tracedSVG":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='400'%20height='222'%20viewBox='0%200%20400%20222'%20preserveAspectRatio='none'%3e%3cpath%20d='M0%2076v77h4l5-1h2l12-1v-1l-1-1%204%201c2%201%204%202%205%201%203-2%202-2-3-2-4%200-4-1%200-2%206%200%207-2%207-10l1-6h3l4-1c1-2%208-1%208%201l1%201c2%200%201%203-1%203l-3%202-2%201c-2%200-4%202-2%202h1l2%201c2%202-1%208-4%208l-10-1%202%202%202%202-2%202c-3%201-7%201-12-1l-1%201h-3l-8%201-5%201c-6-2-6-3-6%2033v33h6c6%200%207%200%208-2%202-3%202-4%200-4l-1%201h-1l-4%201c-2%202-7%202-6%200h2l1-1%201-2%2014-6h1l3%201h2l4-1c5-1%207-1%207%201h3c1-1%201-1%201%201v1h1c1%201%200%202-1%203l-2%201-4%201c-4%200-5-1-4-2%200-2%200-2-1-1l-2-1-1-1-2%201-1%201-2%202-1%201v2c3%201%205%201%203-1h2l9%201c4%200%206%201%206%202l2%201c4%200%202-24-2-26v-1l-1-2v-2l-2-7-1-7-1-1-2-3c0-3%200-5-1-4l-1-1%201-1%202-3c1-2%203-3%206-4%207-2%2029-13%2028-13-1-2-6-1-7%200l-1%201-1%201v1c-3%201-3%200-3-1%200-2-4-4-6-3-2%200-3%200-1-3l3-3%203-1h1l-2-1-2-2%203-1%203-1%201-1%202%203%202%205v3l6%201h6l-2%203c-6%2010-7%2014-7%2023v8l-3%205c-6%206-9%2014-7%2018v7l-1%209-1%204h38l1-5c2-6%206-14%209-15%202-1%202-2%202-13%200-29%200-29%208-31l6-1a676%20676%200%200118-10c1-2%201-2%204-2%204%201%204%201%203%205-1%203-1%204%201%2010%203%2010%203%2010%209%209%205%200%205%200%206%202%200%202%200%203-2%205l-2%203c1%201-16%2026-18%2027l-2-4a240%20240%200%2000-9-32l2%209%201%209%201%204v17l2%206-4%203c-4%204-4%204-2%204l3-1%202-3%203-2%203-1-2%203-4%204h5l6-1h1l19%201h18l1-3%202-7v-5l4%201h19l1-12a213%20213%200%20011-26c-4-2%202-11%2010-15%209-5%2010-6%2013-2%204%203%204%204%201%204l-3%201v1l4%203c3%203%204%204%205%202%202-1%205-1%205%201l2-1%206-3c3%200%203%200%202-2-2%200-2-2-2-6%200-6%204-11%2010-12%204-1%2013-7%2013-9s4-5%207-5h3l16-5c3-1%203-1%202-4s-1-3%202-3%203%200%201-1h-4c-1%201-1%200-1-4%200-5%200-6%202-6v-3c-2%200-2-1-1-2l1-5c-1-5%205-9%2011-8%205%200%2013%203%2013%204h-1c-2%200-3%204-2%205l1%203c0%202%200%202-2%201-3-2-4%200-3%203%201%202%202%203%203%202l3-1c3%201%202%204-2%2011l-1%205%202-2c1-2%201-2%201%200l3%203c11%203%2021%208%2023%2012%201%202%202%204%204%204l6%206%207%206c6%202%2010%2010%207%2015-2%204-4%205-11%205-6%200-6%200-2%201%205%201%206%202%204%204s-7%2012-7%2015c0%201%201%201%201-1%202-4%203-6%204-5v3l2-1%201-1%206%202a584%20584%200%2000-8%201c-2%201-11%2019-10%2020l-1%201-1%202%203%201%202%201h-6l-2%206-2%204%2026%201h26v-34a191%20191%200%2000-1-35l1-77V0H0v76m294-47c-2%201-3%202-4%206s-1%204-3%204c-28-8-63-3-77%2011-18%2017%203%2038%2041%2041l9%201h6l6-2%207-1c3-1%204-1%207%202%203%204%204%204%204-1%200-4%201-4%205-6%205-2%205-2%205%200l1-1%205-6c6-5%209-14%207-23-1-1%200-3%201-5%202-4%200-16-4-19s-10-4-16-1m-149%202c-6%201-15%204-20%208s-5%204-5%201c1-6-9-8-16-4-4%203-4%203-4%209%200%207%202%2011%204%2011s2%201%201%206c0%204%200%207%202%2010%201%205%203%205%203%201l1-3%201%204c0%204%201%204%203-1%202-4%202-4%200-7-2-5-1-16%202-20s3-3%200%203c-6%2012%202%2026%2020%2033%207%203%2021%203%2028%201h7c2%203%203%202%203-1%200-2%201-3%204-6%209-6%2014-18%2010-25l-1-3c1-3%203%205%203%2011%200%205%200%206-4%2012-3%203-4%206-4%207l-1%201v1l1%201c2%200%209-13%2010-18l1-5c2-3%202-7%201-9-1-1-1-1%201-1l2-1h-2c-2%200-2%200-2-2s-8-8-11-8c-2%200-2%200%200%203%204%204%203%205-1%201-10-8-24-12-37-10M58%2045c-21%206-28%2027-14%2041%208%207%2022%2010%2032%206%205-2%206-2%209%200l3%202-1-3c0-3%200-5%202-7%208-11%208-22-1-31-7-7-20-10-30-8m135%2047c-1%201-3%204-3%207l-2%204v4l1%205c-1%202%201%207%204%2010%207%204%2017%201%2015-5%200-2%200-2%202-3%204-1%205-4%204-12s-1-8-6-11c-6-3-11-3-15%201m-88%205c-7%205-6%2027%202%2027%202%200%202%200%200%201l-2%202-2%205-2%204h2c2%200%202%200%202%202v1l1-2%201-2%201-2h-2l-2%201%202-2%202-3c0-2%202-1%202%201s1%202%204-2c6-6%205-9%200-4l-4%202c-2%200%204-6%206-7l3-2%201-2c2%200%204-5%203-8l-2-1h-3v-2c0-2%200-2%202-2%203%200%202-2-2-5s-10-3-13%200m62%2055c-2%202-2%203-2%205l-2%201-4%201-2%202-6%204%202%201c4-1%207%200%208%203%200%203%203%204%203%202l2-2%207-1%204-1-3-2c-3-3-4-4-4-9%200-7%200-7-3-4m76%2020l-8%2018c-8%2018-9%2021-9%2027l1%205h28v-5c0-3-1-10-4-18-5-15-7-23-7-27-1-3-1-3-1%200m-169%205l-4%208c0%202%208%205%2011%204l7-1c12-1%2013-7%202-8-8-1-9-2-10-3h-6m198%2013l1%203c1%201%201%201-1%201-3%200-10%205-12%208-2%202-4%2014-3%2018%200%202%200%202%2017%202h16v-5l-1-4%205%201c10%201%2010%201%209%205l-1%203h20c19%200%2019%200%2019-2s0-2-2-2c-1%201-1-1-1-11l-1-11c-3-1-9%201-17%206l-9%204-3%202-2%201c-3%200-11-6-17-13-7-7-10-8-12-5h-2l-1-1h-2'%20fill='%23d3d3d3'%20fill-rule='evenodd'/%3e%3c/svg%3e","aspectRatio":1.8045112781954886,"src":"/static/9102b3ad314d70a43b8224802fb300e2/0d359/20140709_python_bytes_3.1.png","srcSet":"/static/9102b3ad314d70a43b8224802fb300e2/5ae31/20140709_python_bytes_3.1.png 240w,\n/static/9102b3ad314d70a43b8224802fb300e2/88c65/20140709_python_bytes_3.1.png 480w,\n/static/9102b3ad314d70a43b8224802fb300e2/0d359/20140709_python_bytes_3.1.png 900w","sizes":"(max-width: 900px) 100vw, 900px"}}}}}},"pageContext":{"slug":"/python/python-variable-assignment-statements-rules-conventions-naming/","totalLessons":24}}}