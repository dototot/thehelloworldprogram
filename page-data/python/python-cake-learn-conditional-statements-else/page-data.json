{"componentChunkName":"component---src-templates-blog-post-js","path":"/python/python-cake-learn-conditional-statements-else/","result":{"data":{"markdownRemark":{"html":"<p>When I was a young whippersnapper, I didn’t get dessert unless I finished my dinner. Dinner always consisted of healthy stuff like spinach so it was very hard to finish. That was my introduction to <strong>conditional statements</strong>. Conditional statements are like saying, “If this, then that.” <em>If</em> I ate dinner, <em>then</em> I got dessert. In my example, eating dinner is the <em>boolean condition</em> and getting dessert is the <em>consequent.</em> if Python, then code?</p>\n<h2>If Python, then Cake!</h2>\n<p>We can write my example above in Python:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> dinner <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">if</span> dinner <span class=\"token operator\">==</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n…    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Cake!'</span><span class=\"token punctuation\">)</span>\n…\nCake!</code></pre></div>\n<p>Sweet! I ate dinner so I get dessert. Unless the cake is a lie…</p>\n<p>We don’t have to explicitly evaluate True or False in our condition statement. Python will interpret the value of our variable and proceed accordingly. I can rewrite the above example like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">if</span> dinner<span class=\"token punctuation\">:</span>\n…    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Cake!'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Because the variable dinner was assigned True, I get cake.</p>\n<p><strong>else</strong></p>\n<p>Let’s write the function, dessert(), this time with what is called an <em>alternative.</em></p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">def</span> <span class=\"token function\">dessert</span><span class=\"token punctuation\">(</span>cake<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n…    <span class=\"token keyword\">if</span> cake <span class=\"token operator\">==</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'The cake is a lie!'</span><span class=\"token punctuation\">)</span>\n…    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Om nom nom.'</span><span class=\"token punctuation\">)</span>\n…</code></pre></div>\n<p>Piece of cake, right? It gets better. Let’s combine Boolean logic operators with our variables.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> dinner <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> dinner<span class=\"token punctuation\">:</span>\n…    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'How can you have any pudding, if you don’t eat your meat?'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>If you recall, <span class=\"lang:python decode:true crayon-inline \">if not dinner</span>  is the same as “if dinner is False”.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> dinner <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> cake <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">if</span> dinner <span class=\"token keyword\">and</span> cake<span class=\"token punctuation\">:</span>\n…    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'So full!'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>You can only get ‘So full!’ if both dinner and cake are True.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> dinner <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> cake <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span><span class=\"token keyword\">if</span> dinner <span class=\"token keyword\">or</span> cake<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Yay! I choose cake!'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>If you want to test a condition, use an <em>if</em> statement. If you learned nothing, start again. Else, <a href=\"https://thehelloworldprogram.com/python/python-elif-snakes-else-ladders/\">proceed to the next tutorial: multiple conditions</a>.</p>","excerpt":"When I was a young whippersnapper, I didn’t get dessert unless I finished my dinner. Dinner always consisted of healthy stuff like spinach…","frontmatter":{"lesson":18,"title":"If Python, Then Cake! Learn Conditional Statements or Else","category":"Python","video":null,"image":{"childImageSharp":{"fluid":{"tracedSVG":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='400'%20height='222'%20viewBox='0%200%20400%20222'%20preserveAspectRatio='none'%3e%3cpath%20d='M0%2055v54l3-3c3-2%204-2%208-2%206%200%206%200%207%203%200%202%200%203-2%205-2%201-3%204-3%206-1%203-1%203-3%202H8l-2%201v2c2%200%202%201%201%201v2c2%201-2%202-4%200v2l2%202h3c7%205%207%2011%201%2010l-5-2H2c-2%200-2%203-2%2032a209%20209%200%20001%2034l-1%2010v8h9c5%200%208%200%207-1l2-3c1-2%202-2%202-1-2%205-3%205%2078%205a947%20947%200%2000100-1c-1%201%200%201%202%201l3-1h1l2%201c2%200%202%200%200-2-3-1-3-1-2-2l4%202%202%202h191V0h-7c-5%200-6%200-6%202l-2%202-2-1h-5v1l-1%201-1-4-168-1H41v8c0%208%200%209-1%208l-2-1h1l1-1-1-1V5c-1-4-3-5-6-5l-3%202-1%201c-4%201-8%202-5%202%202%200%203%203%200%203l-1%202v4l-1%204c-2%201-2%200-2-6%200-8-2-15-2-9%200%201%200%202-1%201-1-3-3-4-10-4H0v55m146-33c-46%209-58%2041-23%2059%2026%2014%2064%2012%2088-4%204-2%204-2%209-1%207%203%208%202%204-2-5-5-5-4-2-9%208-16-5-33-32-41-10-3-35-4-44-2m114%2039l-3%201c-1%200-2%200-1%201%201%203-2%206-4%206-2-1-3%200-4%201v1l1%202-1%201v1c1%201-1%206-4%206l-2%202-2%201v1h-1c-2-1%200%204%204%2010%204%205%205%205%207%205l1%201%202-1c3-3%202-4%200-4l-2-2h2c4%202%209-3%205-6v-2h10l1-2c1-1%201-1-2-1l-2-1v-3l5-1%203-2-2-3-1-5-1-1-1-2c1-2-6-6-8-4m20%204c-2%201-3%207-1%208v5c-1%205-1%205%202%204l6%201c2%202%203%202%203%201l2-2%201-2v-2c1-2-1-5-2-3-1%201-3%200-2-1l1-1v-5c0-3-7-5-10-3m91%2014c-2%201-3%204-2%207l1%202%201-2%203-3c1%200%201%201-1%203-2%204-1%209%202%2014l1%202h2c2-2%202-12-1-12v-5c3-4-1-8-6-6m-91%2010c-1%202-3%203-5%202h-11c0%202%206%206%208%205%203%200%202%201%200%206-3%203-4%2010-2%2010l1%201%201%202%202%204c0%203%200%203%202%201%203-1%203-2%202-5l1-9%201-6v9c0%209%200%209%201%204V99c-1%201-1%201-1-1%200-3%203-10%204-10v-1c-1-1-3%200-4%202m28%202l-1%206-1%203c-1%201-1%201-1-1l-2-3c-2-3-6%201-5%204v3c-2%200-2-5%200-8%203-3%203-7%202-7l-4%203c-3%202-3%203-2%206%202%206%201%207-2%205-5-2-9%203-6%208l3%202h1l-2%201c-2%201-2%202-2%207%201%205%202%2010%202%206h1c1%200%201%201-1%202l-2%205c0%205-3%207-4%205%200-3-2-2-1%200l-1%202c-2%200-1-5%201-8l1-3-1-4-1-2-2-1h-1l-1%202-1%204-1%207c-1%203-1%204%201%204l4%202c5%204%208%202%2010-4%201-8%202-9%202-3v6l2%201%204%201c3%201%203%201%202-1s-1-2%201-2l8-2c-2%200-4-3-3-3l-1-4v-5c-1-1-1-1-2%201-1%205-2%203-2-6l1-9%201%204v2l1%201%201%205%202%203v-13c0-5%200-5%201-2%200%202%201%203%202%203l1%202%201%205c2%202%202%202%202-2%200-7%201-12%203-12l1%206v4c2-2%202-4%201-9%200-5%200-7%202-10l1-6-1-3v2c0%203-1%203-2%201l-3-1-2-2c-1-1-1%200-1%204%201%206%200%205-1-2l-2-4-1%204m-91%206l-2%201c-2%200-9%208-9%209l-2%202c-4%201-8%206-10%2010l-3%205c-2%202-2%2010%200%209s9%200%2012%201c3%200%203%200%202-1l-2-2-2-1c-1-1-1-1%203-1%204%201%205%201%205-1%200-3%200-5-3-7l-2-2h3c3%200%203%200%202%201s-1%201%201%202c3%201%205%200%204-3l2-1c2%201%202%200%202-2s0-2%201-1c1%205%2010-7%209-11%200-3-3-6-7-8-3-1-2-1-4%201m-165%206l-1%202c0%201-3%201-6-1-2%200-2%206-1%207v1l-1%204c0%204%201%205%202%203l1-1c2%201%200%206-1%206l-1-1v-2c-2%200-1%207%200%208%201%200%202%201%201%202l1%202%201%201-1%201v2l2%201%201%201-1%201c-2%201-2%205%200%206%202%202%201%203-2%202h-3v17h3c2%200%202%200%202%206%200%205%200%205-2%203s-5-1-5%202l-2%206-1%205h-1l-11%204%203%201c2%200%202%201%202%203%200%204%201%204%2010%204%206-1%208-1%2010-3%202-3%202-3%200-3-5%200-6-1-3-3%202-1%202-2%202-5-1-4-1-4%201-3l3-1h1c2%201%203%200%205-2l-2-18-3%203c-2%202-2%202%200-3l-1-1c-4%202-2-1%202-3%204-1%207-6%205-8l-1-2-1-3c-1-1-1-1-1%201v2c-1%201-2-3-2-4l3-1c2%200-2-4-4-4v-1c2%200%201-2-1-2-1%200-2-1-2-4l-2-4-1-2%202-2%202%201-1%201c-1%201-1%201%202%201s6-2%203-2l1-2%201-2-1%201h-3v-2c1-1%202-2%201-3h-2v-1l-2-1v-2c-2%200-2-1-1-3h1l1%201v-3c-1-1-1-1%201-1v-1l-1-2-1-2v2m141%2032c-2%203-6%2019-6%2026-1%2012%200%2015%203%2015h2l-2-1c-1%200-1-6%201-9%202-2%202-2%206%200%206%203%206%202%200-3-5-5-6-7-3-11l3-8c2-5%202-5%200-8-2-2-3-2-4-1m-113%205l-6%206-3%203-1%203%201%201h4c2-1%203%200%203%201%201%202%2012%201%2015-1l3-2-6%201c-4%200-5%200-4-1h-1c-2%200-2%200-1-1l2-2%203-3-1-1v-1l2-1c-1-1%200-1%201-1v-2c-3-2-6-1-11%201m148%203c-2%200-2%201-2%204l-1%204v3c1%202%201%202-1%202h-2l-4%206c-7%207-9%2013-7%2021l-2-1c-2-3-2-3-2-1l2%206c0%203%200%203-1%202-2-3-3-2-3%200%201%202%200%202-2%203l-3%201%203%202c3%202%204%202%2012%202%206-1%2017-4%2012-4v-4l1-2c-1-1%200-2%203-4%204-2%205-4%205-6h-1c-2%201-5%200-5-2l-1-1v-12l-1-4c-1-2%200-3%201-2l3-1c1-1%201-1-1-2h-2l2-1%203-1-3-1c-4-1-4-2-1-2%202%201%202%201%200-1l-2-2h3l7-1h3c-1-1-10-2-13-1m83%200l-12%202h-15c-9-3-9-2-12%2010l-3%2011-5%2010-3%206h3l4%201-4%201c-5%201-9%207-9%2012l2%203%202%201c2%203%209%203%2012%201%202-2%204-15%202-15v-1l4%203c3%202%204%203%204%209%201%208%203%209%206%206l4-2c2%200%204-3%204-6%200-2%201-3%206-4a153%20153%200%200015-8v-2l1-2c-2-3-2-14-1-14%201%201%201%200%201-1l1-4c1-1%201-2-1-2-2-1-2-1-2-8v-4l-1%207-1%205-1-4-1-3c-1%200-1-3%201-5l1-3h-2M81%20159l-1%2010-1%206v14l3%201c3%200%204-1%204-3v-26l-5-2m67%2032l-6%207c-1%204%200%204%203%201s4-2%201%201-2%204%202%203l4-2%202-3c-1-2%203-3%204%200l1%208c1%209%201%209%202%200l-1-9v-2c2-1%200-2-4-1l-3-1c1-1%201-1-1-1-2%201-2%201%200-1%202-5%201-4-4%200m163-1l-2%201c-5%200-9%203-11%206-5%206-5%206-1%204h4c2%201%209%200%208-2l1-3v-1l1-1c1%201%203-3%201-4h-1m-292%201c-4%201-7%204-9%209l-4%207-3%203h3c2%200%203-1%205-4l5-7c2-1%203-3%202-4%200-2%200-2%201-1%202%202%202%202-1%206-4%206-3%2011%203%2015%203%203%204%202%201-1l-1-3%201%201c1%201%201%201%203-1v-8l-3%202c-4%203-6%201-3-2%201-2%203-3%203-2%201%200%206-2%207-4%202-3%201-4-2-2s-4%203-3%201l-2-6-3%201'%20fill='%23d3d3d3'%20fill-rule='evenodd'/%3e%3c/svg%3e","aspectRatio":1.8045112781954886,"src":"/static/6ea0fd2f6393aed934afc8b43153e0b9/0d359/20150714_python_7.2_if_else.png","srcSet":"/static/6ea0fd2f6393aed934afc8b43153e0b9/5ae31/20150714_python_7.2_if_else.png 240w,\n/static/6ea0fd2f6393aed934afc8b43153e0b9/88c65/20150714_python_7.2_if_else.png 480w,\n/static/6ea0fd2f6393aed934afc8b43153e0b9/0d359/20150714_python_7.2_if_else.png 900w","sizes":"(max-width: 900px) 100vw, 900px"}}}}}},"pageContext":{"slug":"/python/python-cake-learn-conditional-statements-else/","totalLessons":24}}}