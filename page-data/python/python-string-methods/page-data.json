{"componentChunkName":"component---src-templates-blog-post-js","path":"/python/python-string-methods/","result":{"data":{"markdownRemark":{"html":"<p>There are several built-in methods that allow us to easily make modifications to strings in Python. In this tutorial we will cover the .upper(), .lower(), .count(), .find(), .replace() and str() methods.</p>\n<p>But first, let’s take a look at the len() method. While it’s not limited to strings, now is a good time to make the introduction. We use the built-in Python method, len(), to get the length of any sequence, ordered or unordered: strings, lists, tuples, and dictionaries. For example:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> s <span class=\"token operator\">=</span> “This string contains forty<span class=\"token operator\">-</span>two characters<span class=\"token punctuation\">.</span>”\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\n<span class=\"token number\">42</span></code></pre></div>\n<h2>.upper() &#x26; .lower()</h2>\n<p>The .upper() and .lower() string methods are self-explanatory. Performing the .upper() method on a string converts all of the characters to uppercase, whereas the lower() method converts all of the characters to lowercase.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> s <span class=\"token operator\">=</span> “Whereof one cannot speak<span class=\"token punctuation\">,</span> thereof one must be silent<span class=\"token punctuation\">.</span>”\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> s\n<span class=\"token string\">'Whereof one cannot speak, thereof one must be silent.'</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> s<span class=\"token punctuation\">.</span>upper<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">'WHEREOF ONE CANNOT SPEAK, THEREOF ONE MUST BE SILENT.'</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> s<span class=\"token punctuation\">.</span>lower<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">'whereof one cannot speak, thereof one must be silent.'</span></code></pre></div>\n<h2>.count()</h2>\n<p>The .count() method adds up the number of times a character or sequence of characters appears in a string. For example:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> s <span class=\"token operator\">=</span> <span class=\"token string\">\"That that is is that that is not is not is that it it is\"</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> s<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">(</span><span class=\"token string\">\"t\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">13</span></code></pre></div>\n<p>Why didn’t it count <em>all</em> of the <em>t</em>‘s? Because ‘T’ is a different character from ‘t’. So, if we want to count all of the <em>t</em>‘s.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> s <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span>lower<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> s<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">(</span><span class=\"token string\">\"t\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">14</span></code></pre></div>\n<p>We can also count entire words, which, as we know, are sequences of characters:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">s <span class=\"token operator\">=</span> <span class=\"token string\">\"James while John had had had had had had had had had had had a better effect on the teacher\"</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> s<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">(</span><span class=\"token string\">\"had\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">11</span></code></pre></div>\n<h2>.find()</h2>\n<p>We search for a specific character or characters in a string with the .find() method.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">s <span class=\"token operator\">=</span> <span class=\"token string\">\"On the other hand, you have different fingers.\"</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> s<span class=\"token punctuation\">.</span> find<span class=\"token punctuation\">(</span><span class=\"token string\">\"hand\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">13</span></code></pre></div>\n<p>The results tell us that “hand” begins at the 13th position in the sequence.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> s<span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span><span class=\"token string\">\"o\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">7</span></code></pre></div>\n<p>But if we want to find the second “o” we need to specify a range.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> s<span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span><span class=\"token string\">\"o\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">20</span></code></pre></div>\n<p>This begins searching at the 8th element and finds “o” at 20. You can also specificy an end to the range, and, like slicing, we can do so backwards:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> s<span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span><span class=\"token string\">\"e\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">26</span></code></pre></div>\n<h2>.replace()</h2>\n<p>Let’s say we want to increase the value of a statement. We do so with the .replace() method. For example:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> s <span class=\"token operator\">=</span> <span class=\"token string\">\"I intend to live forever, or die trying.\"</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> s<span class=\"token punctuation\">.</span>replace<span class=\"token punctuation\">(</span><span class=\"token string\">\"to\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"three\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">'I intend three live forever, or die trying.'</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> s<span class=\"token punctuation\">.</span>replace<span class=\"token punctuation\">(</span><span class=\"token string\">\"fore\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"five\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">'I intend to live fivever, or die trying.'</span></code></pre></div>\n<h2>String Conversion</h2>\n<p>How does one become one with everything? With the str() method.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> one <span class=\"token operator\">=</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> one\n<span class=\"token string\">'1'</span></code></pre></div>\n<p>Now that you are enlightened, you can stop learning Python and live in the moment. OR: You can <a href=\"https://thehelloworldprogram.com/python/life-like-python-list/\" title=\"Life is Like A Python List\">learn about <strong>lists</strong> in our next chapter</a>.</p>","excerpt":"There are several built-in methods that allow us to easily make modifications to strings in Python. In this tutorial we will cover the…","frontmatter":{"lesson":10,"title":"Python String Methods: str(), upper(), lower(), count(), find(), replace() & len()","category":"Python","video":null,"image":{"childImageSharp":{"fluid":{"tracedSVG":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='400'%20height='222'%20viewBox='0%200%20400%20222'%20preserveAspectRatio='none'%3e%3cpath%20d='M67%2010C4%2017-11%2043%2040%2057l14%203h5l-1%205c-2%206-1%206%205%201l5-5%2013%201c30%203%2069-3%2086-12%2027-13%2012-30-34-39-11-1-54-2-66-1m6%201C18%2016-6%2034%2023%2049c6%203%2031%2010%2037%2010v4l-1%205%204-4%204-4%2021%201c49%201%2091-11%2091-26%200-7-14-15-34-20-18-4-53-6-72-4m23%2059l-3%201c-3%200-4%203-2%204%201%201%202%202%202%206-1%207-2%209-8%2012l-5%203c-1%201-1%200-1-1%200-2%200-2-2-1l-2%201-1%201v-4l-1%203c-2%202-3%202-2%200%200-1-1-1-4%201h-2v-1l-1%203-1%204-2-4c-1-3-3-4-3-2s-6%206-8%206h-2l2-1%202-3%201-2v-2h-3c-2%202-6-2-5-4s3-3%203%200c0%202%201%201%203-1%203-3%203-4%200-4-2%200-3-1-4-3-1-3-3-5-5-4l1%203c1%202%200%203-2%201l-1-2h-5c-2%202-2%202-1%206%201%203%201%204-1%206v4c1%203%201%204-1%204h-4c-7%203-11%200-11-7%201-4%201-4-1-4s-3%201-3%208v8H7l-7-1v41l3-1c7-1%2013-1%2014%202%201%201%203%202%204%201l2%201h4c1-1%201%200%201%206s0%208%202%208h1a122%20122%200%2001-9%2022l-1-2-2-1h-1v-1l-2%201-4-1H7l-3%201-2%201-1%201c-1-1-1%206-1%2019v20h117a1806%201806%200%2000122-1%20568%20568%200%200059-2v-1c-2%200-2%200-1-1%201-2%201-2-5-2-2%200-3%200-4-2l-1-1c0%202-1%202-12%202h-13l-1%201v-3h-2v2l-2%201h-4l-3-1%203-1c3-1%203-1-1-1h-6c-1-2-2-1-2%201%201%201%201%201-1%201h-2l-6%201-6-1-4-2h-5c-2-2-5-1-4%201s1%202-1%202l4%202%208%202h-5l-11-3-2-2c-4-2-8-2-7%200l-3%201c-4%200-7-1-5-2l1-3c0-1-9-1-10%201l-3%201c-2%200-2%200-1-1l2-1h-1l-2-1c0-2-2-3-2-1l-1%201-1%201-2%201-2-1-1-1-2-1c-2-2-3-2-10-3-6%200-7%200-2%201l5%201h-7c-12%201-19%200-19-2h-3l-3-1h-5c-5-2-4-11%201-11h4l-3-2c-3-2-3-2-2-5%202-3%204-11%204-15%200-7-1-6%2020-7a1059%201059%200%200163-2l-10-1h7c6%200%2017-1%2016-2h-9c-8%200-12-1-6-2a221%20221%200%200147%201l2-2h2c2%202%207%204%207%202l1-1%201%202c0%203-1%203-3%202l-2%201c1%202%201%202-2%202h-3c-1%202%208%201%2010-1s7-2%207%200l3%201c2%200%203%201%203%202l-2%205c0%203%200%203-9%202a166%20166%200%2000-49-3l-12%201%201%201h1l-2%201%2012%202a245%20245%200%200129%203c7%200%2019%202%2024%204%207%203%207%203%209%201l2-3c0-2%200-2%202-1l10%202c14%202%2018%204%209%205l-4%202h-11c-1%202%200%202%205%203s5%203%200%202c-2%200-3%200-3%202-1%202%200%202%203%202l5-1h3l8%201c8%200%2011%200%2010%201l11%202%203%201h1c1-1%2010%200%2014%202v1l3%202h9c-1%200-1-2%201-2l1%201%202%203c1%201%201%201%201-1s0-2%201-1%202%201%203-1l3-1-1%202c-1%201-1%201%201%202%202%200%202%200%201%201-2%201%200%202%203%201v-1l-1-1h7v1l-2%201h-2v4c-1%201-1%201%201%201l3-1%202-1c2%200%202%201%201%202-2%202-11%202-12%200l-4%201h-13l2%202-1%201h-4l-1%201c1%201%205%202%2022%202h22v-11c0-18-1-50-2-46l-1%204-1-4c-1-3-1-3-1-1-1%203-3%204-5%203s-1-5%201-7c2-3%203-4%200-3-1%200-2%200-3-2%200-1%200-2-1-1h-2c-1-1-1-1%201-2l2-1h1c1%201%201%201%201-1-1-1%200-2%201-2l1%202c-1%201%200%202%201%202s2%200%201%202l1%201%202%201c2%200%202%200%202-2s0-3-1-2c-2%200-1-2%201-3%202-2%201-4-1-4l-3-1%202-1%203%201v-21c0-21-1-24-4-22-4%201-3%209%200%2011l2%201h-3c-2-2-3%200-2%203%202%202%202%202-1%203-2%202-2%202-1%203%202%202%204%209%202%209l-1%204-3%205c-1%201-2%202-1%203l-1%201c-1-1-1%200-1%201l-1%202-1%202v1l-1-3c-1-4-8-2-8%202%200%202%200%202-1-1l-2-2-1-1c-1-2-1-2-1%202l-4%2012c-3%207-3%208-3%204v-3l-2%202-2%204c-1%206-2%207-2%204l-1-5c-1-2-1-2-2%200h-1l4-10c2-5%204-9%203-10%200-2%204-8%209-10l4-2%202%203c2%202%203%203%204%202%203-1%207-7%208-10%200-3%200-3-4-3-6%200-7-1-6-3l-1-4c-2-2%200-3%205-3%204%200%205-1%205-3l-1-2v-2l-1-2-2-2c0-2%200-2-1-1-2%202-2%202-3%200h-4c-3-2-1-3%202-3%202%201%202%201%201-1s-3-3-3-1h-1c0-2-2-1-2%201%200%203-2%201-2-3-1-7-5-7-9%200l-2%204-1-3c-1-2-7-4-7-2l-4-3-3-3-2%203c-1%205-2%206-3%205l1-3v-2l-2%201c-1%203-2%201-1-2%200-2-1-3-3-3-2-1-3%201-5%209%200%202%200%203-2%202v-3c1-2%201-2-1-3l-5-3c-3-2-7-2-5%200l-2%201-2%202c0%202-3%202-5%200l-2-2-1%203c0%203-2%204-3%201%200-3-3-3-5%200l-2%202c-1-1%203-8%204-7%202%200%201-2-2-3l-1-3c1-2-4-5-9-5-6%200-6%201-6%203l1%202v3l3%201v2l-2-1c-2-1-2-1-2%202l1%204v2l1%201v2c-1%201-1%201%201%201%204-1%206%204%203%208l-3%205-2%202-1%202-1%201c0-1-2%200-2%202-2%203-2%203-6%202-4%200-4%200-3%201%202%202%202%203-3%203-6%200-6-5%200-12l2-2h-3l-4-1h-2c-2-2-2-2%200-3s3-1%207%201l4%201%202-1h3c2%200%207-8%206-8a413%20413%200%2000-6-6c3%201%204%200%201-2-2-2-7-2-9%201l-2%201%201-2c2-2%203-3%202-5l-2-2-4%201c-5%200-5%202-1%204%202%202%202%202%200%202l-3%201-3-4c-2-4-4-5-7-1-1%201-1%202-3%201l-2-2-3-5-4-5h-6c-5%201-5%201-7-1h-1c0%201-1%201-2-1l-2-2-2%203-2%203v3c-2%204%200%206%203%204l2-2c2%200%201%204-1%205-2%202-3%202-3%200h-1l-2%202c0%202%207%205%2012%206l6%201%205%201c6-1%209%201%209%204l2%202c2%201%202%201%200%202l-3%201h3c5%200%207%203%206%209%200%203-5%208-7%208s-2%201-2%203-1%203-2%203l-1%201c1%202-3%201-4-1-2-2-2-3-1-5%202-2%203-8%202-10l-2%201c-2%201-2%201-2-4%200-4%200-4-2-2-2%201-2%201-2-1l1-2c1-1%200-4-2-4s-4%202-3%204l-2%208-1-2c1-3-1-4-3-1-2%201-2%204-1%204v2l-3%203h-3l-7-1-6-1-1-2%202-3c3%200%204-2%203-4%200-2-3-3-5-2s-3%200-4-1l-4-3-3-2h5l6%201h5l11%201h4l-1-2%207-3-4-2-8-4-9-4-3-1-4-2c-2%200-4-2-2-3l-2-3-3-2c-1-2%200-3%202-1l6%201-2-2-4-2c-2-2-3-2-9-2l-8-1-2-1-2%201-1%203c-2%201-2%208-1%2011v6c-1%200-2-1-2-3-1-2-2-3-4-2l-2%202-1%202c-2%201-2%201-4-1-2-3-3-4-8-1-9%204-10%204-10%203l-3-1c-2%200-2%200-2%204%201%204%200%205-2%202-2-2-6-5-10-6-3-1-3-1-4%203l-2%202v-1l1-3h-1c-1%202-1%202-5%200s-5-3-6-2h-1l-2-1v-2c2-2%202-3%200-3h-1v-2c-2%200-4-3-4-4%201-1%206%200%207%202%200%202%202%204%204%203l1%203%202%204c2%200%202-1%202-6l-1-7-1-4c0-5-9-9-12-5m8%2027h-3c-2%200-2%200-2%202%200%203-2%205-3%203-1-3-2-1-1%202l1%2010c0%205%200%206%202%207v1c-2%200-2%201-2%203a466%20466%200%20011%2014c2-1%203-2%203-4%202-4%203-4%202%200%200%204%201%209%203%209h1c0%203%203%207%204%206l1%202%201%203c3-1%203-2%201-8l-1-9-1-3%201-7v-5l-6-1-6-1v-1c9%201%2011-5%206-19l-2-4m215%201v3c2%203%201%204-1%203s-10%200-12%201v5l1%204v-3c1-3%203-4%203-2s4%206%204%205l4-4%203-2v3c-1%203%201%204%203%201l1-1c1%202%207%202%2010%201h1l1%201%201-1c0-3%202-2%204%200%204%204%205-4%201-10-2-4-4-4-3%200%200%202%200%202-4%202l-5-1c1-1-1-2-5-2h-2l3%202c2%201%202%201%200%201l-3-1-3-2-1-1c1-2-1-4-1-2M33%20108c-1%200-2%202-2%205%200%206-1%2012-3%2015-1%203%200%205%202%203v1l1%204c1%200%203-2%202-4l1-1%201-5%201-3v-7l1-2%202%201%201-1c1-2%201-2%201%201l1%205v1c-1%202%201%205%204%207s4%204%201%202c-3-1-4-1-2%202v5l1%204%202%205%201%201c1%200%202%202%200%202-2%201%200%205%204%2010%204%204%205%205%205%203a372%20372%200%20011-26l2%204c2%200%200-13-2-16-1-2%200-8%201-8l1%203c1%202%201%202%201-1s-1-3-4-4l-4-1h-1l-1-1h-1c-2%201-3%200-2-2v-1l-2%202v2l-2-2c-2-2-9-4-12-3m135%201l-3%201-3%201-7%202-4-1v-1l-2%201h-1l-1-1-2%201-1%201-2%201h-11l-2%204v10l2-2c3-3%204-2%203%202l-1%204%201%206%201%206c1%200%204-6%204-9%200-5%201-6%204-5l5%201h6l14%201h4v-1c2%200-1-7-4-10-3-2-4-5-5-6%200-4%202-5%203-1%201%202%202%203%207%205l4%202%201%202c1%201%202%200%203-2l3-2c2%200%203%200%203-3%200-5-2-7-10-6l-8-1h-1m124%2012c-3%202-4%204-3%205l-3%207c-3%204-3%204-1%207%201%202%203%204%205%204l3%201h-4c-3%200-3%200-2%201v2c-2%201%203%207%205%207%203%200%207-4%208-9l1-4%202%204c2%207%209%2011%2012%206%202-4%200-17-3-17v2h-1v-3c1-2%201-3-1-4l-2-2%201%202-1%203c-1%201-3-3-3-5v-1l-1-2-3-2-2-2-3-3-4%203m55%207l-2%203c0%202-9%2010-11%2010-3%200-4%203-2%207l1%205-2-1c-2%200-2%200-1%201h-2c-2-2-6-1-6%201h2c2-1%205%200%205%202l3%201c3%200%203%200%202-1-2-3-1-3%202-1%204%202%207%203%205%201-1-2-1-2%201-2l3-2c3-2%202-4%200-1-3%202-2%200%201-3l2-5c0-3%201-4%203-7%203-6%203-8%201-9-3-1-4-1-5%201M65%20146l-2%201c-3%201-4%204-3%2010l-1%208-2%206c-1%201-1%201-1-1v-3l-1%203%201%204%202%206%201%205h15l2%201c2%201%202%201%200%201-3%200-3%200-1%201%204%202%205%201%206-13v-10h-3c-3%200-4%200-3-1%200-2%204-3%205-1s2%201%202-2c0-2-1-3-2-3l-1-2v-1l-2-1c0-2-2-1-5%201l-4%202c-1%200-1-1%201-2%203-1%204-3%202-3l-3%201c-2%202-3%202-3%201l4-3%204-1-3-1-4-3h-1m102%204h-2l-2%201%2015%202%202%201c0%201%201%202%205%202l6-1-1-1c-1%200-2-1-1-2%200-2%200-2-7-2a2488%202488%200%2001-15%200m43%200h-2c-4%200-4%201-1%203%204%202%2029%202%2029%200l1-1%201%202c-1%201%208%202%2011%200%201-1-1-1-4-1l-6-1-16-1h-1l-2-1h-10m88%204c-2%203-3%206-1%205l2%201c1%201%200%201-1%201-2%200-3%202%200%204%201%201%201%201-2%201l-4%201c-1%201%200%201%201%201h2l-1%202c-4-1-6%203-3%204%206%202%2025%204%2026%204%201-1-1-5-4-8l-1-3c2%200%200-2-2-3a362%20362%200%2000-3-1l2-1h2l-2-1-2-2c-1-2%200-3%201-1l1%201c1-1-1-3-4-4-3%200-4-1-2-2%201-1-1-2-2-2l-3%203m40%2010c0%202%200%202-3%202-3-1-4%200-2%201%201%201%200%201-1%201l-3%201-1%201-2-2-2-1c-1%200-2%201-1%206l1%207%2021%203c1%201%204-9%203-11l1-1%201-2c0-1-3-2-4-1h-4c-3-1-4-2-3-4s0-3-1-3v3m-306%200l-3%208c-1%204-3%208-2%209%200%203%204%203%204%200h2v1l1%201%201-1%201-1c6%201%208-14%202-17h-6m274%2049c0%202%200%202-1%201s-6%201-5%203h3a374%20374%200%20003%201c-2%201%200%204%203%204l2-1-2-1-2-1h12v-1h5l-1-2v-1l1-1c0-2-1-2-4%200l-4%202-3%201h-2c-3%200-4-1-1-1v-1c-1-1-1-1%201-1h3c0-1-5-2-6-1l-1-1v-1l-1%202'%20fill='%23d3d3d3'%20fill-rule='evenodd'/%3e%3c/svg%3e","aspectRatio":1.8045112781954886,"src":"/static/77f5d5ffafc2d2162ab7ceba016faeb3/0d359/20140916_python4.3_string_methods.png","srcSet":"/static/77f5d5ffafc2d2162ab7ceba016faeb3/5ae31/20140916_python4.3_string_methods.png 240w,\n/static/77f5d5ffafc2d2162ab7ceba016faeb3/88c65/20140916_python4.3_string_methods.png 480w,\n/static/77f5d5ffafc2d2162ab7ceba016faeb3/0d359/20140916_python4.3_string_methods.png 900w","sizes":"(max-width: 900px) 100vw, 900px"}}}}}},"pageContext":{"slug":"/python/python-string-methods/","totalLessons":24}}}